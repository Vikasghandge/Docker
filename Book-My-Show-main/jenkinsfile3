

 // ##### its jenkins file without sonarqube for eks cluster.   


pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }

    environment {
        DOCKER_IMAGE = 'ghandgevikas/bms:latest'
        EKS_CLUSTER_NAME = 'my-eks'
        AWS_REGION = 'ap-south-1'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Vikasghandge/Docker.git'
                sh 'ls -la'  // Verify files after checkout
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                cd Book-My-Show-main/bookmyshow-app
                ls -la  # Verify package.json exists
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json  # Remove old dependencies
                    npm install  # Install fresh dependencies
                else
                    echo "Error: package.json not found in bookmyshow-app!"
                    exit 1
                fi
                '''
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('Docker Build & Push') {
            steps {
                dir('Book-My-Show-main') {
                    script {
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                            sh '''
                            echo "Building Docker image..."
                            docker build --no-cache -t ghandgevikas/bms:latest -f bookmyshow-app/Dockerfile bookmyshow-app

                            echo "Pushing Docker image to registry..."
                            docker push ghandgevikas/bms:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS Cluster') {
            steps {
                script {
                    sh '''
                    echo "Verifying AWS credentials..."
                    aws sts get-caller-identity

                    echo "Configuring kubectl for EKS cluster..."
                    aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

                    echo "Verifying kubeconfig..."
                    kubectl config view

                    echo "Deploying application to EKS..."
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml

                    echo "Verifying deployment..."
                    kubectl get pods
                    kubectl get svc
                    '''
                }
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'ghandgevikas@gmail.com',
                attachmentsPattern: 'trivyfs.txt'
        }
    }
}





___________________________________________________________________________________________

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "ghandgevikas/devopsexamapp:latest"
        SCANNER_HOME = tool 'sonar-scanner'
        CLUSTER_NAME = "my-eks"
        REGION = "ap-south-1"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git url: 'https://github.com/Vikasghandge/Docker.git', branch: 'main'
            }
        }

        stage('File System Scan') {
            steps {
                sh "trivy fs --scanners vuln,misconfig --format table -o trivy-fs-report.html ."
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=devops-exam-app \
                        -Dsonar.projectKey=devops-exam-app \
                        -Dsonar.sources=. \
                        -Dsonar.exclusions=**/*.java \
                        -Dsonar.python.version=3 \
                        -Dsonar.host.url=http://localhost:9000
                    """
                }
            }
        }

        stage('Verify Docker Compose') {
            steps {
                sh '''
                    docker compose version || { echo "Docker Compose not available"; exit 1; }
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('devops-exam-app-master/backend') {
                    script {
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                            sh "docker push ${DOCKER_IMAGE}"
                        }
                    }
                }
            }
        }

        stage('Docker Scout Image Analysis') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker-scout quickview ${DOCKER_IMAGE}"
                        sh "docker-scout cves ${DOCKER_IMAGE}"
                        sh "docker-scout recommendations ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir('devops-exam-app-master') {
                    sh '''#!/bin/bash
                        echo "Stopping existing containers..."
                        docker compose down --remove-orphans || true

                        echo "Starting services..."
                        docker compose up -d --build

                        echo "Waiting for MySQL..."
                        for i in {1..24}; do
                            if docker compose exec mysql mysqladmin ping -uroot -prootpass --silent; then
                                echo "MySQL ready!"
                                break
                            fi
                            echo "Attempt $i/24: MySQL not ready"
                            docker compose logs mysql --tail=5 || true
                            sleep 5
                            if [ $i -eq 24 ]; then
                                echo "ERROR: MySQL failed to start"
                                exit 1
                            fi
                        done
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                dir('devops-exam-app-master') {
                    sh '''
                        docker compose ps -a
                        echo "Testing Flask endpoint:"
                        curl -I http://localhost:5000 || true
                    '''
                }
            }
        }

        stage('Deploy to EKS Cluster') {
    steps {
        dir('devops-exam-app-master') {
            script {
                sh '''#!/bin/bash
                    echo "Verifying AWS credentials..."
                    aws sts get-caller-identity

                    echo "Configuring kubectl for EKS cluster..."
                    aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}

                    echo "Verifying kubeconfig..."
                    kubectl config current-context

                    echo "Deploying application to EKS..."
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml

                    echo "Verifying deployment..."
                    kubectl get pods
                    kubectl get svc
                '''
            }
        }
    }

